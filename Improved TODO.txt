--Rendering code can be hard to read and understand. Please comment your code!--

1) Remove everything :)
2) Create some classes, functions and variables

You will need two init methods. One for initialising OpenGL and the other for initialising the world.
The OpenGL init function will look something like:

def init():
    window.setup()
    Camera.resize(fullscreen)
    Camera.setup(fov, ncp) #ncp or the Near Clipping Plain. ncp is used to set how close an object is to the camera before it is clipped. More allows for less z-fighting in the distance. This value cannot be 0
    
The world initialisation function should load each chunk from world files and call the init function for each chunk.
    

You will need a rendering loop. The loop should look something like:

while True:
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    #If you are going to include an update method for movement, etc, this is the place to put it
    Camera.useView() #Function that updates the camera's rotation and location
    render()
    Camera.updateView()
    
You will also want a Camera class (referenced above). See the included .java file for details on what that should include.
The Location class referenced in Camera can be replaced with X, Y, Z, RX (rotationX), RY, RZ, and world (world will be completely different in different projects. Contains variables such as entities and chunks) variables
The Chunk class should contain all of the blocks from that chunk and some rendering code. Entities can be stored here, however it is probably easier to store them elsewhere.
Chunks can be the same size, bigger or smaller that Minecraft's chunks. You must find the balance between the time it takes to render each chunk per frame and the time it takes to modify a chunk. Larger chunks will be faster to render from frame to frame, however they will take longer to modify.

The Chunk init function should look like:

def init(self):
    self.chunkID = glGenLists(maxchunks)
    glNewList(chunkID, GL_COMPILE)
    glScalef(-1f, 1f, -1f); #might not be needed, depending on min/max rotation in camera class.
        for (blocks):
            glBegin(GL_QUADS)
            #render each face here. may differ depending on camera min/max rotation.
            #use Podshot's resourcepack model loader
            glEnd()
    glEndList()

The World class's rendering function should be called by the renderer's rendering function. It will contain a loop that calls the rendering function in each chunk. The chunk's rendering function should look something like:

def render(self):
    glCallList(heightmapDisplayList);
    
Shaders can be used here for whatever reason. See included Shaders .java class for details.

By this stage, the renderer should be rendering the level. You will need to add GUI rendering into the Renderer file and entities into the world file.